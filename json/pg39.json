{
    "id": "39",
    "formats": [
        {
            "format": "text/html",
            "fileName": "39.html.images",
            "filePath": "http://www.gutenberg.org/ebooks/39.html.images",
            "extension": "images"
        },
        {
            "format": "application/rdf+xml",
            "fileName": "39.rdf",
            "filePath": "http://www.gutenberg.org/ebooks/39.rdf",
            "extension": "rdf"
        },
        {
            "format": "application/epub+zip",
            "fileName": "39.epub.noimages",
            "filePath": "http://www.gutenberg.org/ebooks/39.epub.noimages",
            "extension": "noimages"
        },
        {
            "format": "application/epub+zip",
            "fileName": "39.epub.images",
            "filePath": "http://www.gutenberg.org/ebooks/39.epub.images",
            "extension": "images"
        },
        {
            "format": "application/zip",
            "fileName": "39/39.zip",
            "filePath": "http://www.gutenberg.org/files/39/39.zip",
            "extension": "zip"
        },
        {
            "format": "application/x-mobipocket-ebook",
            "fileName": "39.kindle.noimages",
            "filePath": "http://www.gutenberg.org/ebooks/39.kindle.noimages",
            "extension": "noimages"
        },
        {
            "format": "text/plain; charset=us-ascii",
            "fileName": "39/39.txt",
            "filePath": "http://www.gutenberg.org/files/39/39.txt",
            "extension": "txt"
        },
        {
            "format": "application/x-mobipocket-ebook",
            "fileName": "39.kindle.images",
            "filePath": "http://www.gutenberg.org/ebooks/39.kindle.images",
            "extension": "images"
        },
        {
            "format": "text/html",
            "fileName": "39.html.noimages",
            "filePath": "http://www.gutenberg.org/ebooks/39.html.noimages",
            "extension": "noimages"
        },
        {
            "format": "text/plain",
            "fileName": "39.txt.utf-8",
            "filePath": "http://www.gutenberg.org/ebooks/39.txt.utf-8",
            "extension": "utf-8"
        }
    ],
    "languages": [
        "en"
    ],
    "title": [
        "Hitchhiker's Guide to the Internet"
    ],
    "author": "Krol, Ed",
    "issued": "1992-09-01",
    "text": "*** START OF THIS PROJECT GUTENBERG EBOOK HITCHHIKER'S GUIDE TO THE INTERNET ***\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            The Hitchhikers Guide to the Internet\r\n                        25 August 1987\r\n\r\n\r\n\r\n                           Ed Krol\r\n                    krol@uxc.cso.uiuc.edu\r\n\r\n\r\n\r\n\r\n This document was produced through funding of the National\r\n Science Foundation.\r\n\r\n Copyright (C) 1987, by the Board of Trustees of The University\r\n of Illinois.  Permission to duplicate this document, in whole\r\n or part, is granted provided reference is made to the source\r\n and this copyright is included in whole copies.\r\n\r\n\r\n This document assumes that one is familiar with the workings\r\n of a non-connected simple IP network (e.g. a few 4.2 BSD\r\n systems on an Ethernet not connected to anywhere else).\r\n Appendix A contains remedial information to get one to this\r\n point.  Its purpose is to get that person, familiar with a\r\n simple net, versed in the \"oral tradition\" of the Internet\r\n to the point that that net can be connected to the Internet\r\n with little danger to either.  It is not a tutorial, it\r\n consists of pointers to other places, literature, and hints\r\n which are not normally documented.  Since the Internet is a\r\n dynamic environment, changes to this document will be made\r\n regularly.  The author welcomes comments and suggestions.\r\n This is especially true of terms for the glossary (definitions\r\n are not necessary).\r\n\r\n\r\n\r\n\r\n In the beginning there was the ARPAnet, a wide area\r\n experimental network connecting hosts and terminal servers\r\n together.  Procedures were set up to regulate the allocation\r\n of addresses and to create voluntary standards for the network.\r\n As local area networks became more pervasive, many hosts became\r\n gateways to local networks.  A network layer to allow the\r\n interoperation of these networks was developed and called IP\r\n (Internet Protocol).  Over time other groups created long haul\r\n IP based networks (NASA, NSF, states...).  These nets, too,\r\n interoperate because of IP.  The collection of all of these\r\n interoperating networks is the Internet.\r\n\r\n Two groups do much of the research and information work of\r\n the Internet (ISI and SRI).  ISI (the Informational Sciences\r\n Institute) does much of the research, standardization, and\r\n allocation work of the Internet.  SRI International provides\r\n information services for the Internet.  In fact, after you\r\n are connected to the Internet most of the information in\r\n this document can be retrieved from the Network Information\r\n Center (NIC) run by SRI.\r\n\r\n\r\n\r\n Operating the Internet\r\n\r\n Each network, be it the ARPAnet, NSFnet or a regional network,\r\n has its own operations center.  The ARPAnet is run by\r\n BBN, Inc. under contract from DARPA.  Their facility is\r\n called the Network Operations Center or NOC.  Cornell\r\n University temporarily operates NSFnet (called the Network\r\n Information Service Center, NISC).  It goes on to the\r\n\r\n                             -2-\r\n\r\n regionals having similar facilities to monitor and keep\r\n watch over the goings on of their portion of the Internet.\r\n In addition, they all should have some knowledge of what is\r\n happening to the Internet in total. If a problem comes up,\r\n it is suggested that a campus network liaison should contact\r\n the network operator to which he is directly connected. That\r\n is, if you are connected to a regional network (which is\r\n gatewayed to the NSFnet, which is connected to the\r\n ARPAnet...)  and have a problem, you should contact your\r\n regional network operations center.\r\n\r\n\r\n RFCs\r\n\r\n The internal workings of the Internet are defined by a set\r\n of documents called RFCs (Request for Comments).  The general\r\n process for creating an RFC is for someone wanting something\r\n formalized to write a document describing the issue and mailing\r\n it to Jon Postel (postel@isi.edu).  He acts as a referee for\r\n the proposal.  It is then commented upon by all those wishing\r\n to take part in the discussion (electronically of course).\r\n It may go through multiple revisions.  Should it be generally\r\n accepted as a good idea, it will be assigned a number and\r\n filed with the RFCs.\r\n\r\n The RFCs can be divided into five groups: required, suggested,\r\n directional, informational and obsolete.  Required RFC's (e.g.\r\n RFC-791, The Internet Protocol) must be implemented on any host\r\n connected to the Internet.  Suggested RFCs are generally\r\n implemented by network hosts.  Lack of them does not preclude\r\n access to the Internet, but may impact its usability.  RFC-793\r\n (Transmission Control Protocol) is a suggested RFC.  Directional\r\n RFCs were discussed and agreed to, but their application has never\r\n come into wide use.  This may be due to the lack of wide need for\r\n the specific application (RFC-937 The Post Office Protocol) or\r\n that, although technically superior, ran against other pervasive\r\n approaches (RFC-891 Hello).  It is suggested that should the\r\n facility be required by a particular site, animplementation\r\n be done in accordance with the RFC.  This insures that, should\r\n the idea be one whose time has come, the implementation will be\r\n in accordance with some standard and will be generally usable.\r\n Informational RFCs contain factual information about the\r\n Internet and its operation (RFC-990, Assigned Numbers).\r\n Finally, as the Internet and technology have grown, some\r\n RFCs have become unnecessary.  These obsolete RFCs cannot\r\n be ignored, however.  Frequently when a change is made to\r\n some RFC that causes a new one to be issued obsoleting others,\r\n the new RFC only contains explanations and motivations for the\r\n change.  Understanding the model on which the whole facility\r\n is based may involve reading the original and subsequent RFCs\r\n on the topic.\r\n\r\n                             -3-\r\n\r\n (Appendix B contains a list of what are considered to be the\r\n major RFCs necessary for understanding the Internet).\r\n\r\n\r\n\r\n The Network Information Center\r\n\r\n The NIC is a facility available to all Internet users which\r\n provides information to the community.  There are three\r\n means of NIC contact: network, telephone, and mail.  The\r\n network accesses are the most prevalent.  Interactive access\r\n is frequently used to do queries of NIC service overviews,\r\n look up user and host names, and scan lists of NIC documents.\r\n It is available by using\r\n\r\n      %telnet sri-nic.arpa\r\n\r\n on a BSD system and following the directions provided by a\r\n user friendly prompter.  From poking around in the databases\r\n provided one might decide that a document named NETINFO:NUG.DOC\r\n (The Users Guide to the ARPAnet) would be worth having.  It could\r\n be retrieved via an anonymous FTP.  An anonymous FTP would proceed\r\n something like the following.  (The dialogue may vary slightly\r\n depending on the implementation of FTP you are using).\r\n\r\n      %ftp sri-nic.arpa\r\n      Connected to sri-nic.arpa.\r\n      220 SRI_NIC.ARPA FTP Server Process 5Z(47)-6 at Wed\r\n17-Jun-87 12:00 PDT\r\n      Name (sri-nic.arpa:myname): anonymous\r\n      331 ANONYMOUS user ok, send real ident as password.\r\n      Password: myname\r\n      230 User ANONYMOUS logged in at Wed 17-Jun-87 12:01 PDT,\r\njob 15.\r\n      ftp> get netinfo:nug.doc\r\n      200 Port 18.144 at host 128.174.5.50 accepted.\r\n      150 ASCII retrieve of <NETINFO>NUG.DOC.11 started.\r\n      226 Transfer Completed 157675 (8) bytes transferred\r\n      local: netinfo:nug.doc  remote:netinfo:nug.doc\r\n      157675 bytes in 4.5e+02 seconds (0.34 Kbytes/s)\r\n      ftp> quit\r\n      221 QUIT command received. Goodbye.\r\n\r\n (Another good initial document to fetch is\r\n NETINFO:WHAT-THE-NIC-DOES.TXT)!\r\n\r\n Questions of the NIC or problems with services can be asked\r\n of or reported to using electronic mail.  The following\r\n addresses can be used:\r\n\r\n      NIC@SRI-NIC.ARPA         General user assistance, document requests\r\n      REGISTRAR@SRI-NIC.ARPA   User registration and WHOIS updates\r\n      HOSTMASTER@SRI-NIC.ARPA  Hostname and domain changes and updates\r\n      ACTION@SRI-NIC.ARPA      SRI-NIC computer operations\r\n      SUGGESTIONS@SRI-NIC.ARPA Comments on NIC publications and services\r\n\r\n                             -4-\r\n\r\n For people without network access, or if the number of documents\r\n is large, many of the NIC documents are available in printed\r\n form for a small charge.  One frequently ordered document for\r\n starting sites is a compendium of major RFCs.  Telephone access is\r\n used primarily for questions or problems with network access.\r\n (See appendix B for mail/telephone contact numbers).\r\n\r\n\r\n\r\n The NSFnet Network Service Center\r\n\r\n The NSFnet Network Service Center (NNSC) is funded by NSF to\r\n provide a first level of aid to users of NSFnet should they\r\n have questions or encounter problems traversing the network.\r\n It is run by BBN Inc.  Karen Roubicek\r\n (roubicek@nnsc.nsf.net) is the NNSC user liaison.\r\n\r\n The NNSC, which currently has information and documents\r\n online and in printed form, plans to distribute news through\r\n network mailing lists, bulletins, newsletters, and online\r\n reports.  The NNSC also maintains a database of contact\r\n points and sources of additional information about NSFnet\r\n component networks and supercomputer centers.\r\n\r\n Prospective or current users who do not know whom to call\r\n concerning questions about NSFnet use, should contact the\r\n NNSC.  The NNSC will answer general questions, and, for\r\n detailed information relating to specific components of the\r\n Internet, will help users find the appropriate contact for\r\n further assistance.  (Appendix B)\r\n\r\n\r\n\r\n Mail Reflectors\r\n\r\n The way most people keep up to date on network news is\r\n through subscription to a number of mail reflectors.  Mail\r\n reflectors are special electronic mailboxes which, when they\r\n receive a message, resend it to a list of other mailboxes.\r\n This in effect creates a discussion group on a particular\r\n topic.  Each subscriber sees all the mail forwarded by the\r\n reflector, and if one wants to put his \"two cents\" in sends\r\n a message with the comments to the reflector....\r\n\r\n The general format to subscribe to a mail list is to find\r\n the address reflector and append the string -REQUEST to the\r\n mailbox name (not the host name).  For example, if you\r\n wanted to take part in the mailing list for NSFnet reflected\r\n by NSFNET@NNSC.NSF.NET, one sends a request to\r\n\r\n                             -5-\r\n\r\n NSFNET-REQUEST@NNSC.NSF.NET.  This may be a wonderful scheme,\r\n but the problem is that you must know the list exists in the\r\n first place.  It is suggested that, if you are interested,\r\n you read the mail from one list (like NSFNET) and you will\r\n probably become familiar with the existence of others.\r\n A registration service for mail reflectors is provided by\r\n the NIC in the files NETINFO:INTEREST-GROUPS-1.TXT,\r\n NETINFO:INTEREST-GROUPS-2.TXT, and NETINFO:INTEREST-GROUPS-\r\n 3.TXT.\r\n\r\n The NSFNET mail reflector is targeted at those people who\r\n have a day to day interest in the news of the NSFnet (the\r\n backbone, regional network, and Internet inter-connection\r\n site workers).  The messages are reflected by a central\r\n location and are sent as separate messages to each subscriber.\r\n This creates hundreds of messages on the wide area networks\r\n where bandwidth is the scarcest.\r\n\r\n There are two ways in which a campus could spread the news\r\n and not cause these messages to inundate the wide area\r\n networks.  One is to re-reflect the message on the campus.\r\n That is, set up a reflector on a local machine which forwards\r\n the message to a campus distribution list.  The other is\r\n to create an alias on a campus machine which places the\r\n messages into a notesfile on the topic.  Campus users who\r\n want the information could access the notesfile and see the\r\n messages that have been sent since their last access.  One\r\n might also elect to have the campus wide area network\r\n liaison screen the messages in either case and only forward\r\n those which are considered of merit.  Either of these\r\n schemes allows one message to be sent to the campus, while\r\n allowing wide distribution within.\r\n\r\n\r\n Address Allocation\r\n\r\n Before a local network can be connected to the Internet it\r\n must be allocated a unique IP address.  These addresses are\r\n allocated by ISI.  The allocation process consists of getting\r\n an application form received from ISI.  (Send a message\r\n to hostmaster@sri-nic.arpa and ask for the template for a\r\n connected address).  This template is filled out and mailed\r\n back to hostmaster.  An address is allocated and e-mailed back\r\n to you.  This can also be done by postal mail (Appendix B).\r\n\r\n IP addresses are 32 bits long.  It is usually written as\r\n four decimal numbers separated by periods (e.g., 192.17.5.100).\r\n Each number is the value of an octet of the 32 bits.  It was\r\n seen from the beginning that some networks might choose to\r\n organize themselves as very flat (one net with a lot of nodes)\r\n and some might organize hierarchically\r\n\r\n                             -6-\r\n\r\n (many interconnected nets with fewer nodes each and a backbone).\r\n To provide for these cases, addresses were differentiated into\r\n class A, B, and C networks.  This classification had to with the\r\n interpretation of the octets.  Class A networks have the first\r\n octet as a network address and the remaining three as a host\r\n address on that network.  Class C addresses have three octets of\r\n network address and one of host.  Class B is split two and two.\r\n Therefore, there is an address space for a few large nets, a\r\n reasonable number of medium nets and a large number of small nets.\r\n The top two bits in the first octet are coded to tell the address\r\n format.  All of the class A nets have been allocated.  So one\r\n has to choose between Class B and Class C when placing an order.\r\n (There are also class D (Multicast) and E (Experimental) formats.\r\n Multicast addresses will likely come into greater use in the near\r\n future, but are not frequently used now).\r\n\r\n In the past sites requiring multiple network addresses\r\n requested multiple discrete addresses (usually Class C).\r\n This was done because much of the software available\r\n (not ably 4.2BSD) could not deal with subnetted addresses.\r\n Information on how to reach a particular network (routing\r\n information) must be stored in Internet gateways and packet\r\n switches.  Some of these nodes have a limited capability to\r\n store and exchange routing information (limited to about 300\r\n networks).  Therefore, it is suggested that any campus\r\n announce (make known to the Internet) no more than two\r\n discrete network numbers.\r\n\r\n If a campus expects to be constrained by this, it should\r\n consider subnetting.  Subnetting (RFC-932) allows one to\r\n announce one address to the Internet and use a  set of\r\n addresses on the campus.  Basically, one defines a mask\r\n which allows the network to differentiate between the\r\n network portion and host portion of the address.  By using a\r\n different mask on the Internet and the campus, the address\r\n can be interpreted in multiple ways.  For example, if a\r\n campus requires two networks internally and has the 32,000\r\n addresses beginning 128.174.X.X (a Class B address) allocated\r\n to it,  the campus could allocate 128.174.5.X to one part\r\n of campus and 128.174.10.X to another.  By advertising\r\n 128.174 to the Internet with a subnet mask of FF.FF.00.00,\r\n the Internet would treat these two addresses as one. Within\r\n the campus a mask of FF.FF.FF.00 would be used, allowing the\r\n campus to treat the addresses as separate entities. (In reality\r\n you don't pass the subnet mask of FF.FF.00.00 to the Internet,\r\n the octet meaning is implicit in its being a class B address).\r\n A word of warning is necessary.  Not all systems know how to\r\n do subnetting.  Some 4.2BSD systems require additional\r\n software.  4.3BSD systems subnet as released.  Other devices\r\n\r\n                             -7-\r\n\r\n and operating systems vary in the problems they have dealing\r\n with subnets.  Frequently these machines can be used as a\r\n leaf on a network but not as a gateway within the subnetted\r\n portion of the network.  As time passes and more systems\r\n become 4.3BSD based, these problems should disappear.\r\n\r\n There has been some confusion in the past over the format of\r\n an IP broadcast address.  Some machines used an address of\r\n all zeros to mean broadcast and some all ones.  This was\r\n confusing when machines of both type were connected to the\r\n same network. The broadcast address of all ones has been\r\n adopted to end the grief.  Some systems (e.g. 4.2 BSD) allow\r\n one to choose the format of the broadcast address.  If a\r\n system does allow this choice, care should be taken that the\r\n all ones format is chosen.  (This is explained in RFC-1009\r\n and RFC-1010).\r\n\r\n\r\n Internet Problems\r\n\r\n There are a number of problems with the Internet.  Solutions\r\n to the problems range from software changes to long term\r\n research projects. Some of the major ones are detailed\r\n below:\r\n\r\n Number of Networks\r\n\r\n      When the Internet was designed it was to have about 50\r\n      connected networks.  With the explosion of networking,\r\n      the number is now approaching 300.  The software in a\r\n      group of critical gateways (called the core gateways of\r\n      the ARPAnet) are not able to pass or store much more\r\n      than that number.  In the short term, core reallocation\r\n      and recoding has raised the number slightly.  By the\r\n      summer of '88 the current PDP-11 core gateways will be\r\n      replaced with BBN Butterfly gateways which will solve\r\n      the problem.\r\n\r\n Routing Issues\r\n\r\n      Along with sheer mass of the data necessary to route\r\n      packets to a large number of networks, there are many\r\n      problems with the updating, stability, and optimality\r\n      of the routing algorithms.  Much research is being done\r\n      in the area, but the optimal solution to these routing\r\n      problems is still years away.  In most cases the the\r\n      routing we have today works, but sub-optimally and\r\n      sometimes unpredictably.\r\n\r\n                             -8-\r\n\r\n\r\n Trust Issues\r\n\r\n      Gateways exchange network routing information.\r\n      Currently, most gateways accept on faith that the\r\n      information provided about the state of the network is\r\n      correct.  In the past this was not a big problem since\r\n      most of the gateways belonged to a single administrative\r\n      entity (DARPA).  Now with multiple wide area networks\r\n      under different administrations, a rogue gateway\r\n      somewhere in the net could cripple the Internet.\r\n      There is design work going on to solve both the problem of\r\n      a gateway doing unreasonable things and providing enough\r\n      information to reasonably route data between multiply\r\n      connected networks (multi-homed networks).\r\n\r\n Capacity & Congestion\r\n\r\n      Many portions of the ARPAnet are very congested during\r\n      the busy part of the day.  Additional links are planned\r\n      to alleviate this congestion, but the implementation\r\n      will take a few months.\r\n\r\n\r\n These problems and the future direction of the Internet are\r\n determined by the Internet Architect (Dave Clark of MIT)\r\n being advised by the Internet Activities Board (IAB).  This\r\n board is composed of chairmen of a number of committees with\r\n responsibility for various specialized areas of the Internet.\r\n The committees composing the IAB and their chairmen are:\r\n\r\n         Committee                            Chair\r\n      Autonomous Networks                  Deborah Estrin\r\n      End-to-End Services                  Bob Braden\r\n      Internet Architecture                Dave Mills\r\n      Internet Engineering                 Phil Gross\r\n           EGP2                            Mike Petry\r\n           Name Domain Planning            Doug Kingston\r\n           Gateway Monitoring              Craig Partridge\r\n           Internic                        Jake Feinler\r\n           Performance & Congestion ControlRobert Stine\r\n           NSF Routing                     Chuck Hedrick\r\n           Misc. MilSup Issues             Mike St. Johns\r\n      Privacy                              Steve Kent\r\n      IRINET Requirements                  Vint Cerf\r\n      Robustness & Survivability           Jim Mathis\r\n      Scientific Requirements              Barry Leiner\r\n\r\n Note that under Internet Engineering, there are a set of\r\n task forces and chairs to look at short term concerns.  The\r\n chairs of these task forces are not part of the IAB.\r\n\r\n                             -9-\r\n Routing\r\n\r\n\r\n Routing is the algorithm by which a network directs a packet\r\n from its source to its destination.  To appreciate the problem,\r\n watch a small child trying to find a table in a restaurant.\r\n From the adult point of view the structure of the dining room\r\n is seen and an optimal route easily chosen.  The child, however,\r\n is presented with a set of paths between tables where a good path,\r\n let alone the optimal one to the goal is not discernible.***\r\n\r\n A little more background might be appropriate.  IP gateways\r\n (more correctly routers) are boxes which have connections to\r\n multiple networks and pass traffic  between these nets.  They\r\n decide how the packet is to be sent based on the information\r\n in the IP header of the packet and the state of the network.\r\n Each interface on a router has an unique address appropriate\r\n to the network to which it is connected.  The information in\r\n the IP header which is used is primarily the destination address.\r\n Other information (e.g. type of service) is largely ignored at this\r\n time.  The state of the network is determined by the routers passing\r\n information among themselves.  The distribution of the database\r\n (what each node knows), the form of the updates, and metrics used\r\n to measure the value of a connection, are the parameters\r\n which determine the characteristics of a routing protocol.\r\n\r\n Under some algorithms each node in the network has complete\r\n knowledge of the state of the network (the adult algorithm).\r\n This implies the nodes must have larger amounts of local\r\n storage and enough CPU to search the large tables in a short\r\n enough time (remember this must be done for each packet).\r\n Also, routing updates usually contain only changes to the\r\n existing information (or you spend a large amount of the\r\n network capacity passing around megabyte routing updates).\r\n This type of algorithm has several problems.  Since the only\r\n way the routing information can be passed around is across\r\n the network and the propagation time is non-trivial, the\r\n view of the network at each node is a correct historical\r\n view of the network at varying times in the past.  (The\r\n adult algorithm, but rather than looking directly at the\r\n dining area, looking at a photograph of the dining room.\r\n One is likely to pick the optimal route and find a bus-cart\r\n has moved in to block the path after the photo was taken).\r\n These inconsistencies can cause circular routes (called\r\n routing loops) where once a packet enters it is routed in a\r\n closed path until its time to live (TTL) field expires and\r\n it is discarded.\r\n\r\n Other algorithms may know about only a subset of the network.\r\n To prevent loops in these protocols, they are usually used in\r\n a hierarchical network.  They know completely about their\r\n own area, but to leave that area they go to one particular\r\n place (the default gateway).  Typically these are used in\r\n smaller networks (campus, regional...).\r\n\r\n                             -10-\r\n\r\n Routing protocols in current use:\r\n\r\n Static (no protocol-table/default routing)\r\n\r\n      Don't laugh.  It is probably the most reliable, easiest\r\n      to implement, and least likely to get one into trouble\r\n      for a small network or a leaf on the Internet.  This is,\r\n      also, the only method available on some CPU-operating\r\n      system combinations. If a host is connected to an Ethernet\r\n      which has only one gateway off of it, one should make that\r\n      the default gateway for the host and do no other routing.\r\n      (Of course that gateway may pass the reachablity\r\n      information somehow on the other side of itself).\r\n\r\n      One word of warning, it is only with extreme caution that\r\n      one should use static routes in the middle of a network\r\n      which is also using dynamic routing.  The routers passing\r\n      dynamic information are sometimes confused by conflicting\r\n      dynamic and static routes.  If your host is on an ethernet\r\n      with multiple routers to other networks on it and the\r\n      routers are doing dynamic routing among themselves,\r\n      it is usually better to take part in the dynamic routing\r\n      than to use static routes.\r\n\r\n\r\n RIP\r\n\r\n      RIP is a routing protocol based on XNS (Xerox Network\r\n      System) adapted for IP networks.  It is used by many\r\n      routers (Proteon, cisco, UB...) and many BSD Unix systems\r\n      BSD systems typically run a program called \"routed\" to\r\n      exchange information with other systems running\r\n      RIP.  RIP works best for nets of small diameter\r\n      where the links are of equal speed.  The reason for\r\n      this is that the metric used to determine which path is\r\n      best is the hop-count.  A hop is a traversal across a\r\n      gateway.  So, all machines on the same Ethernet are\r\n      zero hops away.  If a router connects connects two net-\r\n      works directly, a machine on the other side of the\r\n      router is one hop away....  As the routing information\r\n      is passed through a gateway, the gateway adds one to\r\n      the hop counts to keep them consistent across the net-\r\n      work.  The diameter of a network is defined as the\r\n      largest hop-count possible within a network.  Unfor-\r\n      tunately, a hop count of 16 is defined as infinity in\r\n      RIP meaning the link is down. Therefore, RIP will not\r\n      allow hosts separated by more than 15 gateways in the\r\n      RIP space to communicate.\r\n\r\n      The other problem with hop-count metrics is that if\r\n      links have different speeds, that difference is not\r\n\r\n                             -11-\r\n\r\n      reflected in the hop-count. So a one hop satellite link\r\n      (with a .5 sec delay) at 56kb would be used instead of\r\n      a two hop T1 connection. Congestion can be viewed as a\r\n      decrease in the efficacy of a link. So, as a link gets\r\n      more congested, RIP will still know it is the best\r\n      hop-count route and congest it even more by throwing\r\n      more packets on the queue for that link.\r\n\r\n      The protocol is not well documented.  A group of people\r\n      are working on producing an RFC to both define the\r\n      current RIP and to do some extensions to it to allow it\r\n      to better cope with larger networks.  Currently, the\r\n      best documentation for RIP appears to be the code to\r\n      BSD \"routed\".\r\n\r\n\r\n Routed\r\n\r\n      The ROUTED program, which does RIP for 4.2BSD systems,\r\n      has many options. One of the most frequently used is:\r\n      \"routed -q\" (quiet mode) which means listen to RIP infor-\r\n      mation but never broadcast it.  This would be used by a\r\n      machine on a network with multiple RIP speaking gate-\r\n      ways.  It allows the host to determine which gateway is\r\n      best (hopwise) to use to reach a distant network.  (Of\r\n      course you might want to have a default gateway to\r\n      prevent having to pass all the addresses known to the\r\n      Internet around with RIP).\r\n\r\n      There are two ways to insert static routes into \"routed\",\r\n      the \"/etc/gateways\" file and the \"route add\" command.\r\n      Static routes are useful if you know how to reach a\r\n      distant network, but you are not receiving that route\r\n      using RIP.  For the most part the \"route add\" command is\r\n      preferable to use.  The reason for this is that the\r\n      command adds the route to that machine's routing table\r\n      but does not export it through RIP.  The \"/etc/gateways\"\r\n      file takes precedence over any routing information\r\n      received through a RIP update.  It is also broadcast as\r\n      fact in RIP updates produced by the host without question,\r\n      so if a mistake is made in the \"/etc/gateways\" file,\r\n      that mistake will soon permeate the RIP space and\r\n      may bring the network to its knees.\r\n\r\n      One of the problems with \"routed\" is that you have very\r\n      little control over what gets broadcast and what\r\n      doesn't.  Many times in larger networks where various\r\n      parts of the network are under different administrative\r\n      controls, you would like to pass on through RIP only nets\r\n      which you receive from RIP and you know are reasonable.\r\n      This prevents people from adding IP addresses to\r\n      the network which may be illegal and you being\r\n      responsible for passing them on to the Internet.  This\r\n\r\n                             -12-\r\n\r\n      type of reasonability checks are not available with \"routed\"\r\n      and leave it usable, but inadequate for large networks.\r\n\r\n\r\n Hello (RFC-891)\r\n\r\n      Hello is a routing protocol which was designed and\r\n      implemented in a experimental software router called a\r\n      \"Fuzzball\" which runs on a PDP-11. It does not have\r\n      wide usage, but is the routing protocol currently used\r\n      on the NSFnet backbone.  The data transferred between\r\n      nodes is similar to RIP (a list of networks and their\r\n      metrics).  The metric, however, is milliseconds of delay.\r\n      This allows Hello to be used over nets of various link\r\n      speeds and performs better in congestive situations.\r\n\r\n      One of the most interesting side effects of Hello based\r\n      networks is their great timekeeping ability.  If you\r\n      consider the problem of measuring delay on a link for\r\n      the metric, you find that it is not an easy thing to\r\n      do.  You cannot measure round trip time since the\r\n      return link may be more congested, of a different\r\n      speed, or even not there.  It is not really feasible\r\n      for each node on the network to have a builtin WWV\r\n      (nationwide radio time standard) receiver.  So, you\r\n      must design an algorithm to pass around time between\r\n      nodes over the network links where the delay in\r\n      transmission can only be approximated.  Hello routers\r\n      do this and in a nationwide network maintain synchronized\r\n      time within milliseconds.\r\n\r\n\r\n Exterior Gateway Protocol (EGP RFC-904)\r\n\r\n      EGP is not strictly a routing protocol, it is a reacha-\r\n      bility protocol. It tells only if nets can be reached\r\n      through a particular gateway, not how good the connec-\r\n      tion is.  It is the standard by which gateways to local\r\n      nets inform the ARPAnet of the nets they can reach.\r\n      There is a metric passed around by EGP but its usage is\r\n      not standardized formally.  Its typical value is value\r\n      is 1 to 8 which are arbitrary goodness of link values\r\n      understood by the internal DDN gateways. The smaller\r\n      the value the better and a value of 8 being unreach-\r\n      able.  A quirk of the protocol prevents distinguishing\r\n      between 1 and 2, 3 and 4..., so the usablity of this as\r\n      a metric is as three values and unreachable.  Within\r\n      NSFnet the values used are 1, 3, and unreachable.  Many\r\n      routers talk EGP so they can be used for ARPAnet gateways.\r\n\r\n                             -13-\r\n\r\n Gated\r\n\r\n      So we have regional and campus networks talking RIP\r\n      among   themselves,  the  NSFnet  backbone  talking\r\n      Hello, and the DDN speaking EGP.\r\n      How do they interoperate?  In the beginning there was\r\n      static routing, assembled into the Fuzzball software\r\n      configured for each site.  The problem with doing\r\n      static routing in the middle of the network is that it\r\n      is broadcast to the Internet whether it is usable or\r\n      not.  Therefore, if a net becomes unreachable and you\r\n      try to get there, dynamic routing will immediately\r\n      issue a net unreachable to you.  Under static routing\r\n      the routers would think the net could be reached and\r\n      would continue trying until the application gave up (in\r\n      2 or more minutes).  Mark Fedor of Cornell\r\n      (fedor@devvax.tn.cornell.edu) attempted to solve these\r\n      problems with a replacement for \"routed\" called \"gated\".\r\n\r\n      \"Gated\" talks RIP to RIP speaking hosts, EGP to EGP\r\n      speakers, and Hello to Hello'ers.  These speakers\r\n      frequently all live on one Ethernet, but luckily (or\r\n      unluckily) cannot understand each others ruminations.\r\n      In addition, under configuration file control it can\r\n      filter the conversion.  For example, one can produce a\r\n      configuration saying announce RIP nets via Hello only\r\n      if they are specified in a list and are reachable by\r\n      way of a RIP broadcast as well.  This means that if a\r\n      rogue network appears in your local site's RIP space,\r\n      it won't be passed through to the Hello side of the\r\n      world.  There are also configuration options to do\r\n      static routing and name trusted gateways.\r\n\r\n      This may sound like the greatest thing since sliced\r\n      bread, but there is a catch called metric conversion.\r\n      You have RIP measuring in hops, Hello measuring in\r\n      milliseconds, and EGP using arbitrary small numbers.\r\n      The big questions is how many hops to a millisecond,\r\n      how many milliseconds in the EGP number 3....  Also,\r\n      remember that infinity (unreachability) is 16 to RIP,\r\n      30000 or so to Hello, and 8 to the DDN with EGP.\r\n      Getting all these metrics to work well together is no\r\n      small feat.  If done incorrectly and you translate an\r\n      RIP of 16 into an EGP of 6, everyone in the ARPAnet\r\n      will still think your gateway can reach the unreachable\r\n      and will send every packet in the world your way.  For\r\n      these reasons, Mark requests that you consult closely\r\n      with him when configuring and using \"gated\".\r\n\r\n                             -14-\r\n\r\n \"Names\"\r\n\r\n All routing across the network is done by means of the IP\r\n address associated with a packet. Since humans find it\r\n difficult to remember addresses like 128.174.5.50, a symbolic\r\n name register was set up at the NIC where people would say\r\n \"I would like my host to be named 'uiucuxc'\".  Machines\r\n connected to the Internet across the nation would connect to\r\n the NIC in the middle of the night, check modification dates\r\n on the hosts file, and if modified move it to their local\r\n machine.  With the advent of workstations and micros,\r\n changes to the host file would have to be made nightly.  It\r\n would also be very labor intensive and consume a lot of\r\n network bandwidth. RFC-882 and a number of others describe\r\n domain name service, a distributed data base system for\r\n mapping names into addresses.\r\n\r\n We must look a little more closely into what's in a name.\r\n First, note that an address specifies a particular connec-\r\n tion on a specific network.  If the machine moves, the\r\n address changes.  Second, a machine can have one or more\r\n names and one or more network addresses (connections) to\r\n different networks.  Names point to a something which does\r\n useful work (i.e. the machine) and IP addresses point to an\r\n interface on that provider.  A name is a purely symbolic\r\n representation of a list of addresses on the network.  If a\r\n machine moves to a different network, the addresses will\r\n change but the name could remain the same.\r\n\r\n Domain names are tree structured names with the root of the\r\n tree at the right.  For example:\r\n\r\n                       uxc.cso.uiuc.edu\r\n\r\n is a machine called 'uxc' (purely arbitrary), within the\r\n subdomains method of allocation of the U of I) and 'uiuc'\r\n (the University of Illinois at Urbana), registered with\r\n 'edu' (the set of educational institutions).\r\n\r\n A simplified model of how a name is resolved is that on the\r\n user's machine there is a resolver.  The resolver knows how\r\n to contact across the network a root name server. Root\r\n servers are the base of the tree structured data retrieval\r\n system.  They know who is responsible for handling first\r\n level domains (e.g. 'edu').  What root servers to use is an\r\n installation parameter. From the root server the resolver\r\n finds out who provides 'edu' service.  It contacts the 'edu'\r\n name server which supplies it with a list of addresses of\r\n servers for the subdomains (like 'uiuc').  This action is\r\n repeated with the subdomain servers until the final sub-\r\n domain returns a list of addresses of interfaces on the host\r\n in question.  The user's machine then has its choice of\r\n which of these addresses to use for communication.\r\n\r\n                             -15-\r\n\r\n A group may apply for its own domain name (like 'uiuc'\r\n above).  This is done in a manner similar to the IP address\r\n allocation.  The only requirements are that the requestor\r\n have two machines reachable from the Internet, which will\r\n act as name servers for that domain.  Those servers could\r\n also act as servers for subdomains or other servers could be\r\n designated as such.  Note that the servers need not be\r\n located in any particular place, as long as they are reach-\r\n able for name resolution.  (U of I could ask Michigan State\r\n to act on its behalf and that would be fine).  The biggest\r\n problem is that someone must do maintenance on the database.\r\n If the machine is not convenient, that might not be done in\r\n a timely fashion.  The other thing to note is that once the\r\n domain is allocated to an administrative entity, that entity\r\n can freely allocate subdomains using what ever manner it\r\n sees fit.\r\n\r\n The Berkeley Internet Name Domain (BIND) Server implements\r\n the Internet name server for UNIX systems.  The name server\r\n is a distributed data base system that allows clients to\r\n name resources and to share that information with other net-\r\n work hosts.  BIND is integrated with 4.3BSD and is used to\r\n lookup and store host names, addresses, mail agents, host\r\n information, and more.  It replaces the \"/etc/hosts\" file for\r\n host name lookup.  BIND is still an evolving program.  To\r\n keep up with reports on operational problems, future design\r\n decisions, etc, join the BIND mailing list by sending a\r\n request to \"bind-request@ucbarp.Berkeley.EDU\".  BIND can also\r\n be obtained via anonymous FTP from ucbarpa.berkley.edu.\r\n\r\n There are several advantages in using BIND.  One of the most\r\n important is that it frees a host from relying on \"/etc/hosts\"\r\n being up to date and complete.  Within the .uiuc.edu domain,\r\n only a few hosts are included in the host table distributed\r\n by SRI.  The remainder are listed locally within the BIND\r\n tables on uxc.cso.uiuc.edu (the server machine for most of\r\n the .uiuc.edu domain).  All are equally reachable from any\r\n other Internet host running BIND.\r\n\r\n BIND can also provide mail forwarding information for inte-\r\n rior hosts not directly reachable from the Internet.  These\r\n hosts can either be on non-advertised networks, or not con-\r\n nected to a network at all, as in the case of UUCP-reachable\r\n hosts.  More information on BIND is available in the \"Name\r\n Server Operations Guide for BIND\" in \"UNIX System Manager's\r\n Manual\", 4.3BSD release.\r\n\r\n There are a few special domains on the network, like SRI-\r\n NIC.ARPA.  The 'arpa' domain is historical, referring to\r\n hosts registered in the old hosts database at the NIC.\r\n There are others of the form NNSC.NSF.NET.  These special\r\n domains are used sparingly and require ample justification.\r\n They refer to servers under the administrative control of\r\n\r\n                             -16-\r\n\r\n the network rather than any single organization.  This\r\n allows for the actual server to be moved around the net\r\n while the user interface to that machine remains constant.\r\n That is, should BBN relinquish control of the NNSC, the new\r\n provider would be pointed to by that name.\r\n\r\n In actuality, the domain system is a much more general and\r\n complex system than has been described.  Resolvers and some\r\n servers cache information to allow steps in the resolution\r\n to be skipped.  Information provided by the servers can be\r\n arbitrary, not merely IP addresses.  This allows the system\r\n to be used both by non-IP networks and for mail, where it\r\n may be necessary to give information on intermediate mail\r\n bridges.\r\n\r\n\r\n What's wrong with Berkeley Unix\r\n\r\n University of California at Berkeley has been funded by\r\n DARPA to modify the Unix system in a number of ways.\r\n Included in these modifications is support for the Internet\r\n protocols.  In earlier versions (e.g. BSD 4.2) there was\r\n good support for the basic Internet protocols (TCP, IP,\r\n SMTP, ARP) which allowed it to perform nicely on IP ether-\r\n nets and smaller Internets.  There were deficiencies, how-\r\n ever, when it was connected to complicated networks.  Most\r\n of these problems have been resolved under the newest\r\n release (BSD 4.3).  Since it is the springboard from which\r\n many vendors have launched Unix implementations (either by\r\n porting the existing code or by using it as a model), many\r\n implementations (e.g. Ultrix) are still based on BSD 4.2.\r\n Therefore, many implementations still exist with the BSD 4.2\r\n problems.  As time goes on, when BSD 4.3 trickles through\r\n vendors as new release, many of the problems will be\r\n resolved.  Following is a list of some problem scenarios and\r\n their handling under each of these releases.\r\n\r\n ICMP redirects\r\n\r\n      Under the Internet model, all a system needs to know to\r\n      get anywhere in the Internet is its own address, the\r\n      address of where it wants to go, and how to reach a\r\n      gateway which knows about the Internet.  It doesn't\r\n      have to be the best gateway.  If the system is on a\r\n      network with multiple gateways, and a host sends a\r\n      packet for delivery to a gateway which feels another\r\n      directly connected gateway is more appropriate, the\r\n      gateway sends the sender a message.  This message is an\r\n      ICMP redirect, which politely says \"I'll deliver this\r\n      message for you, but you really ought to use that gate-\r\n      way over there to reach this host\".  BSD 4.2 ignores\r\n      these messages.  This creates more stress on the gate-\r\n      ways and the local network, since for every packet\r\n\r\n                             -17-\r\n\r\n      sent, the gateway sends a packet to the originator.\r\n      BSD 4.3 uses the redirect to update its routing tables,\r\n      will use the route until it times out, then revert to\r\n      the use of the route it thinks is should use.  The\r\n      whole process then repeats, but it is far better than\r\n      one per packet.\r\n\r\n Trailers\r\n\r\n      An application (like FTP) sends a string of octets to\r\n      TCP which breaks it into chunks, and adds a TCP header.\r\n      TCP then sends blocks of data to IP which adds its own\r\n      headers and ships the packets over the network.  All\r\n      this prepending of the data with headers causes memory\r\n      moves in both the sending and the receiving machines.\r\n      Someone got the bright idea that if packets were long\r\n      and they stuck the headers on the end (they became\r\n      trailers), the receiving machine could put the packet\r\n      on the beginning of a page boundary and if the trailer\r\n      was OK merely delete it and transfer control of the\r\n      page with no memory moves involved.  The problem is\r\n      that trailers were never standardized and most gateways\r\n      don't know to look for the routing information at the\r\n      end of the block.  When trailers are used, the machine\r\n      typically works fine on the local network (no gateways\r\n      involved) and for short blocks through gateways (on\r\n      which trailers aren't used).  So TELNET and FTP's of\r\n      very short files work just fine and FTP's of long files\r\n      seem to hang.  On BSD 4.2 trailers are a boot option\r\n      and one should make sure they are off when using the\r\n      Internet.  BSD 4.3 negotiates trailers, so it uses them\r\n      on its local net and doesn't use them when going across\r\n      the network.\r\n\r\n Retransmissions\r\n\r\n      TCP fires off blocks to its partner at the far end of\r\n      the connection.  If it doesn't receive an acknowledge-\r\n      ment in a reasonable amount of time it retransmits the\r\n      blocks.  The determination of what is reasonable is\r\n      done by TCP's retransmission algorithm.  There is no\r\n      correct algorithm but some are better than others,\r\n      where better is measured by the number of retransmis-\r\n      sions done unnecessarily.  BSD 4.2 had a retransmission\r\n      algorithm which retransmitted quickly and often.  This\r\n      is exactly what you would want if you had a bunch of\r\n      machines on an ethernet (a low delay network of large\r\n      bandwidth).  If you have a network of relatively longer\r\n      delay and scarce bandwidth (e.g. 56kb lines), it tends\r\n      to retransmit too aggressively.  Therefore, it makes\r\n      the networks and gateways pass more traffic than is\r\n      really necessary for a given conversation.  Retransmis-\r\n      sion algorithms do adapt to the delay of the network\r\n\r\n                             -18-\r\n\r\n      after a few packets, but 4.2's adapts slowly in delay\r\n      situations.  BSD 4.3 does a lot better and tries to do\r\n      the best for both worlds.  It fires off a few\r\n      retransmissions really quickly assuming it is on a low\r\n      delay network, and then backs off very quickly.  It\r\n      also allows the delay to be about 4 minutes before it\r\n      gives up and declares the connection broken.\r\n\r\n                             -19-\r\n                            Appendix A\r\n                References to Remedial Information\r\n\r\n\r\n      Quaterman and Hoskins, \"Notable Computer Networks\",\r\n      Communications of the ACM, Vol 29, #10, pp. 932-971\r\n      (October, 1986).\r\n\r\n      Tannenbaum, Andrew S., Computer Networks, Prentice\r\n      Hall, 1981.\r\n\r\n      Hedrick, Chuck, Introduction to the Internet Protocols,\r\n      Anonymous FTP from topaz.rutgers.edu, directory\r\n      pub/tcp-ip-docs, file tcp-ip-intro.doc.\r\n\r\n                             -20-\r\n\r\n                            Appendix B\r\n                        List of Major RFCs\r\n\r\n\r\nRFC-768        User Datagram Protocol (UDP)\r\nRFC-791        Internet Protocol (IP)\r\nRFC-792        Internet Control Message Protocol (ICMP)\r\nRFC-793        Transmission Control Protocol (TCP)\r\nRFC-821        Simple Mail Transfer Protocol (SMTP)\r\nRFC-822        Standard for the Format of ARPA Internet Text Messages\r\nRFC-854        Telnet Protocol\r\nRFC-917 *      Internet Subnets\r\nRFC-919 *      Broadcasting Internet Datagrams\r\nRFC-922 *      Broadcasting Internet Datagrams in the Presence of Subnets\r\nRFC-940 *      Toward an Internet Standard Scheme for Subnetting\r\nRFC-947 *      Multi-network Broadcasting within the Internet\r\nRFC-950 *      Internet Standard Subnetting Procedure\r\nRFC-959        File Transfer Protocol (FTP)\r\nRFC-966 *      Host Groups: A Multicast Extension to the Internet Protocol\r\nRFC-988 *      Host Extensions for IP Multicasting\r\nRFC-997 *      Internet Numbers\r\nRFC-1010 *     Assigned Numbers\r\nRFC-1011 *     Official ARPA-Internet Protocols\r\n\r\n      RFC's marked with the asterisk (*) are not included in\r\n      the 1985 DDN Protocol Handbook.\r\n\r\n      Note: This list is a portion of a list of RFC's by\r\n      topic retrieved from the NIC under NETINFO:RFC-SETS.TXT\r\n      (anonymous FTP of course).\r\n\r\n      The following list is not necessary for connection to\r\n      the Internet, but is useful in understanding the domain\r\n      system, mail system, and gateways:\r\n\r\nRFC-882        Domain Names - Concepts and Facilities\r\nRFC-883        Domain Names - Implementation\r\nRFC-973        Domain System Changes and Observations\r\nRFC-974        Mail Routing and the Domain System\r\nRFC-1009       Requirements for Internet Gateways\r\n\r\n                              -21-\r\n\r\n                            Appendix C\r\n              Contact Points for Network Information\r\n\r\n\r\n Network Information Center (NIC)\r\n\r\n      DDN Network Information Center\r\n      SRI International, Room EJ291\r\n      333 Ravenswood Avenue\r\n      Menlo Park, CA 94025\r\n      (800) 235-3155 or (415) 859-3695\r\n      NIC@SRI-NIC.ARPA\r\n\r\n\r\n NSF Network Service Center (NNSC)\r\n\r\n      NNSC\r\n      BBN Laboratories Inc.\r\n      10 Moulton St.\r\n      Cambridge, MA 02238\r\n      (617) 497-3400\r\n      NNSC@NNSC.NSF.NET\r\n\r\n                             -22-\r\n\r\n                           Glossary\r\n\r\n core gateway\r\n\r\nThe innermost gateways of the ARPAnet.  These\r\ngateways have a total picture of the reacha-\r\nbility to all networks known to the ARPAnet\r\nwith EGP.  They then redistribute reachabil-\r\nity information to all those gateways speak-\r\ning EGP.  It is from them your EGP agent\r\n(there is one acting for you somewhere if you\r\ncan reach the ARPAnet) finds out it can reach\r\nall the nets on the ARPAnet. Which is then\r\npassed to you via Hello, gated, RIP....\r\n\r\n count to infinity\r\n\r\nThe symptom of a routing problem where\r\nrouting information is passed in a circular\r\nmanner through multiple gateways.  Each gate-\r\nway increments the metric appropriately and\r\npasses it on.  As the metric is passed around\r\nthe loop, it increments to ever increasing\r\nvalues til it reaches the maximum for the\r\nrouting protocol being used, which typically\r\ndenotes a link outage.\r\n\r\n hold down\r\n\r\nWhen a router discovers a path in the network\r\nhas gone down announcing that that path is\r\ndown for a minimum amount of time (usually at\r\nleast two minutes).  This allows for the pro-\r\npagation of the routing information across\r\nthe network and prevents the formation of\r\nrouting loops.\r\n\r\n split horizon\r\n\r\nWhen a router (or group of routers working in\r\nconsort) accept routing information from mul-\r\ntiple external networks, but do not pass on\r\ninformation learned from one external network\r\nto any others.  This is an attempt to prevent\r\nbogus routes to a network from being propagated\r\nbecause of gossip or counting to infinity.\r\n\r\n                             -23-\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nEnd of Project Gutenberg's Hitchhiker's Guide to the Internet, by Ed Krol\r\n",
    "textIndexes": {
        "header": 20,
        "footer": 1127
    },
    "buildPath": "./json//pg39.json",
    "wordcount": 7755
}